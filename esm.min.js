import B from 'fetch-blob'

var {toStringTag:t,iterator:i,hasInstance:h}=Symbol,
m='append,set,get,getAll,delete,keys,values,entries,forEach,constructor'.split(','),
f=(a,b,c)=>(a+='',/^(Blob|File)$/.test(b?.[t])?[a,b,void 0!==c?c+'':'string'===typeof b.name?b.name:'blob']:[a,''+b]),
e=([a,b,c])=>('Blob'===b[t]&&(b=new File([b],c,{type:b.type,lastModified:b.lastModified})),[a,b])

export class File extends B {
get [t]() {return 'File'}
constructor (b, n, o = {}) {
const { lastModified = Date.now(), ...r } = o
super(b, r)
this.name = (''+n).replace(/\u002F/g, "\u003A")
this.lastModified = +lastModified
this.lastModifiedDate = new Date(lastModified)
}}

export class FormData {
#d=[];
get [t]() {return 'FormData'}
[i](){return this.entries()}
[h](o) {return typeof o==='object'&&o[t]==='FormData'&&!m.some(m=>typeof o[m]!='function')}
append(...a){this.#d.push(f(...a))}delete(a){a+='';this.#d=this.#d.filter(([b])=>b!==a)}
get(a){a+='';for(var b=this.#d,l=b.length,c=0;c<l;c++)if(b[c][0]===a)return e(b[c])[1];return null}
getAll(a,b){b=[];a+='';this.#d.forEach(c=>c[0]===a&&b.push(e(c)[1]));return b}
has(a){a+='';return this.#d.some(b=>b[0]===a)}
forEach(a,b){for(var [c,d]of this)a.call(b,d,c,this)}
set(...a){var b=[],c=!0;a=f(...a);this.#d.forEach(d=>{d[0]===a[0]?c&&(c=!b.push(a)):b.push(d)});c&&b.push(a);this.#d=b}
*entries(){yield*this.#d.map(e)}
*keys(){for(var[a]of this)yield a}
*values(){for(var[,a]of this)yield a}
}

export function formDataToBlob(formData){
var b='----formdata-'+Math.random(),c=[],d=`--${b}\r\nContent-Disposition: form-data; name="`

formData.forEach((v,n)=>typeof v==='string'
?c.push(`${d}${n}"\r\n\r\n${v}\r\n--${b}--`)
:c.push(`${d}${n}"; filename="${v.name}"\r\nContent-Type: ${v.type || 'application/octet-stream'}\r\n\r\n`,v,`\r\n--${b}--`))

return new B(c,{type:'multipart/form-data; boundary='+b})
}
